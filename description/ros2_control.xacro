<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:macro name="ros2_control" params="use_hardware">
    <ros2_control name="ros2_control" type="system">
       <xacro:if value="${use_hardware == 'robot'}">
            <hardware>
                <plugin>robot_hardware_interface/RobotSystemHardware</plugin>
                <param name="hw_start_duration_sec">1.0</param>
                <param name="hw_stop_duration_sec">3.0</param>
            </hardware>
        </xacro:if>
        <xacro:if value="${use_hardware == 'mock'}">
            <hardware>
                <plugin>mock_components/GenericSystem</plugin>
                <param name="calculate_dynamics">true</param>
            </hardware>
        </xacro:if>
        <xacro:if value="${use_hardware == 'ign_gazebo'}">
            <hardware>
                <plugin>gz_ros2_control/GazeboSimSystem</plugin>
            </hardware>
        </xacro:if>
        <xacro:if value="${use_hardware == 'gazebo'}">
            <hardware>
                <plugin>gazebo_ros2_control/GazeboSystem</plugin>
            </hardware>
        </xacro:if>
        <joint name="front_left_wheel_joint">
            <command_interface name="velocity" />
            <state_interface name="position">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="velocity">
                <param name="initial_value">0.0</param>
            </state_interface>
        </joint>
        <joint name="front_right_wheel_joint">
            <command_interface name="velocity" />
            <state_interface name="position">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="velocity">
                <param name="initial_value">0.0</param>
            </state_interface>
        </joint>
        <joint name="rear_left_wheel_joint">
            <command_interface name="velocity" />
            <state_interface name="position">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="velocity">
                <param name="initial_value">0.0</param>
            </state_interface>
        </joint>
        <joint name="rear_right_wheel_joint">
            <command_interface name="velocity" />
            <state_interface name="position">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="velocity">
                <param name="initial_value">0.0</param>
            </state_interface>
        </joint>
        <joint name="bucket_ladder_frame_joint">
            <command_interface name="position">
                <param name="min">0</param>
                <param name="max">1</param>
            </command_interface>
            <state_interface name="position">
                <param name="initial_value">0</param>
            </state_interface>
        </joint>
        <joint name="bucket_ladder_lift_joint">
            <command_interface name="position">
                <param name="min">-1</param>
                <param name="max">1</param>
            </command_interface>
            <state_interface name="position">
                <param name="initial_value">0</param>
            </state_interface>
        </joint>
        <joint name="bucket_ladder_buckets_joint">
            <command_interface name="velocity" />
            <state_interface name="position">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="velocity">
                <param name="initial_value">0.0</param>
            </state_interface>
        </joint>
        <joint name="bucket_dump_joint">
            <command_interface name="position">
                <param name="min">-1</param>
                <param name="max">1</param>
            </command_interface>
            <state_interface name="position">
                <param name="initial_value">0</param>
            </state_interface>
        </joint>
        <gpio name="limit_switch">
            <state_interface name="bucket_ladder_bottom">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="bucket_ladder_top">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="bucket_dump_front">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="bucket_dump_back">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="actuator_extended">
                <param name="initial_value">0</param>
            </state_interface>
        </gpio>
        <gpio name="actuator">
            <command_interface name="relay_1"/>
            <command_interface name="relay_2"/>
            <state_interface name="relay_1">
                <param name="initial_value">0</param>
            </state_interface>
            <state_interface name="relay_2">
                <param name="initial_value">0</param>
            </state_interface>
        </gpio>
    </ros2_control>
    <xacro:if value="${use_hardware == 'ign_gazebo'}">
        <gazebo>
            <plugin filename="libgz_ros2_control-system.so" name="gz_ros2_control::GazeboSimROS2ControlPlugin">
                <robot_param>robot_description</robot_param>
                <robot_param_node>robot_state_publisher</robot_param_node>
                <parameters>$(find osprey_ros)/config/robot_controllers.yaml</parameters>
            </plugin>
            <plugin filename="libignition-gazebo-diff-drive-system.so" name="ignition::gazebo::systems::DiffDrive">
                <left_joint>front_left_wheel_joint</left_joint>
                <left_joint>rear_left_wheel_joint</left_joint>
                <right_joint>front_right_wheel_joint</right_joint>
                <right_joint>rear_right_wheel_joint</right_joint>
                <wheel_separation>1</wheel_separation>
                <wheel_radius>0.1524</wheel_radius>
                <wheels_per_side>2</wheels_per_side>
                <odom_publish_frequency>10</odom_publish_frequency>
                <odom_frame_id>odom</odom_frame_id>
                <base_frame_id> base_link</base_frame_id>
                <enable_odom_tf>true</enable_odom_tf>
                <use_stamped_vel>false</use_stamped_vel>
                <topic>cmd_vel</topic>
                <odom_topic>odom</odom_topic>
                <tf_topic>tf</tf_topic>
            </plugin>
        </gazebo>
    </xacro:if>
    <xacro:if value="${use_hardware == 'gazebo'}">
        <gazebo>
            <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
                <parameters>$(find osprey_ros)/config/robot_controllers.yaml</parameters>
            </plugin>
        </gazebo>
    </xacro:if>
  </xacro:macro>
</robot>
